- description: whole-program pointer analysis
  analysisClass: pascal.taie.analysis.pta.PointerAnalysis
  id: pta
  options:
    cs: ci # | k-[obj|type|call][-k'h]
    only-app: false # only analyze application code
    implicit-entries: true # analyze implicit entries
    distinguish-string-constants: reflection # (distinguish reflection-relevant
    # string constants, i.e., class, method, and field names)
    # | null (do not distinguish any string constants)
    # | app (distinguish string constants in application code)
    # | all (distinguish all string constants)
    # | <predicate-class-name>
    merge-string-objects: true
    merge-string-builders: true
    merge-exception-objects: true
    handle-invokedynamic: false
    propagate-types: [ reference ] # ,null,int,long,...(other primitive types)
    advanced: null # specify advanced analysis:
    # zipper | zipper-e | zipper-e=PV
    # scaler | scaler=TST
    # mahjong | collection
    dump: false # whether dump points-to results (with contexts)
    dump-ci: false # whether dump points-to results (without contexts)
    dump-yaml: false # whether dump points-to results in yaml format
    expected-file: null # path of expected file for comparing results
    reflection-inference: string-constant # | solar | null
    reflection-log: null # path to reflection log, required when reflection option is log
    taint-config: null # path to config file of taint analysis,
    # when this file is given, taint analysis will be enabled
    taint-interactive-mode: false # whether enable interactive mode for taint analysis
    plugins: [ ] # | [ pluginClass, ... ]
    time-limit: -1 # set time limit (in seconds) for pointer analysis,
    # -1 means no time limit

- description: call graph construction
  analysisClass: pascal.taie.analysis.graph.callgraph.CallGraphBuilder
  id: cg
  requires: [ pta(algorithm=pta) ]
  options:
    algorithm: pta # | cha | cha=LIMIT | cha-full
    dump: false # whether dump call graph in dot file
    dump-methods: false # whether dump reachable methods
    dump-call-edges: false # whether dump call edges

- description: dump Tai-e IR for classes of input program
  analysisClass: pascal.taie.analysis.misc.IRDumper
  id: ir-dumper

- description: router analysis
  analysisClass: org.example.spring.RouterAnalysis
  id: routerAnalysis
  requires: []